import pandas as pd


search_msk = [
    'Чемпионат Москвы', 
    'Первенство Москвы', 
    'Кубок Москвы',
    ]

search_rf = [
    'Всероссийские соревнования', 
    'Первенство России', 
    'Кубок России', 
    'Чемпионат России',
    'Чемпионат федерального округа, двух и более федеральных округов',
    ]

search_status = [
    'Первенство субъекта Российской Федерации', 
    'Чемпионат субъекта Российской Федерации',
    'Кубок субъекта Российской Федерации'
    ]

search_status_check = [
    'Другие официальные спортивные соревнования субъекта Российской Федерации',
]

search_status_world = [
    'Международные соревнования',
    'Другие международные соревнования',
]

search_open = ['открытый', 'открытые', 'открытое']

search_students = ['студенческие', 'студенты', 'студентов']

search_festival = ['фестиваль', 'фестивали']

search_region = ['Москва', 'Москвы']

search_outdoors = ['дворовая территория']

search_status_sports = [
    'комплексное мероприятие',
]


#Коментарии IASControl
IASControl_comment = {
    "responsible": [
        "Для мероприятий больше 300 участников необходимо указать ответственного за проведение и его контакт (поле находится в блоке - Организаторы)",
        "Для официальных  московских соревнований (ПМ,ЧМ,КМ) необходимо указать ответственных за проведение и его контакт (поле находится в блоке - Организаторы)",
        "Для официальных  Российских соревнований необходимо указать ответственных за проведение и его контакт (поле находится в блоке - Организаторы)",
        "Актуализируйте(отредактируйте) пожалуйста ответственного за проведение и его контакт (поле находится в блоке - Организаторы)"
    ],
    "triggers": [
        "Не рекомендуем в названии для московских соревнований использовать слова «Открытые» или «Открытый»",
        "Не корректный статус для проведения мероприятия в Москве пожалуйста уточните наименование и категорию мероприятия",
        "Мероприятия для студентов необходимо включать в соответствующие подразделы ЕКП",
        "Необходимо уточнить является ли фестиваль спортивным мероприятием",
        "Место проведение для официальных мероприятий не может быть указано как Дворовая территория, если у Вас мероприятие проходит на открытой местности измените текст места проведения в соответствии с тем где у Вас старт и финиш мероприятия",
        "Организатор Москомспорт необходимо проверить информацию!",
        ],
    "verify_status": [
        "Не корректный статус, пожалуйста уточните категорию мероприятия или наименование (либо уберите слово Первенство из названия)",
        "Для внесения международных мероприятий в Москве необходимо выбрать соответствующи подраздел (Международные соревнования)",
        ],
    "sports": [
        "Пожалуйста не используйте в виде спорта - комплексное мероприятие, если хотите использовать несколько видов спорта используйте чек-бокс мультиспортивные",
        "",
        ],
}

#Добавление комментария для отклонения
def input_report_text(df, excel_file_path, report_text=''):
    #Новый DataFrame пуст. Обновление не требуется.
    if df.empty:
        return
    #df['IASControl'] = df['IASControl'].apply(lambda x: x + f'{report_text}. ')
    df_excel = pd.read_excel(excel_file_path)
    df_excel['IASControl'].fillna('', inplace=True)
    # Обновляем комментарии для совпадающих записей по полю "Реестр №"
    for index, row in df.iterrows():
        reestr_number = row['Реестр №']
        comment = row['IASControl']
        # Проверяем, есть ли запись с таким номером в загруженном df
        match_index = df_excel[df_excel['Реестр №'] == reestr_number].index
        if not match_index.empty:
            # Обновляем комментарий в загруженном df
            df_excel.at[match_index[0], 'IASControl'] = comment + f' {report_text}.'
        else:
            # Добавляем новые записи, если номера нет
            df_excel = pd.concat([df_excel, pd.DataFrame([row])], ignore_index=True)
    # Сохраняем обновленный DataFrame в Excel
    df_excel.to_excel(excel_file_path, index=False)
    return


